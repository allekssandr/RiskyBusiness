import { Request, Response, NextFunction } from 'express';
import { v4 as uuidv4 } from 'uuid';
import prisma from '../config/database';
import { CreateGameRequest, AddPlayerRequest, GenerateItemRequest, SubmitTurnRequest } from '../types';

export const createGame = async (req: Request, res: Response, next: NextFunction) => {
  try {
    const { hostId, scenarioId }: CreateGameRequest = req.body;

    const game = await prisma.game.create({
      data: {
        id: uuidv4(),
        hostId,
        scenarioId,
        status: 'WAITING',
      },
    });

    res.status(201).json({ game });
  } catch (error) {
    next(error);
  }
};

export const getGame = async (req: Request, res: Response, next: NextFunction) => {
  try {
    const { id } = req.params;

    const game = await prisma.game.findUnique({
      where: { id },
      include: {
        players: true,
        scenario: true,
      },
    });

    if (!game) {
      return res.status(404).json({ error: 'Game not found' });
    }

    res.json({ game });
  } catch (error) {
    next(error);
  }
};

export const addPlayer = async (req: Request, res: Response, next: NextFunction) => {
  try {
    const { id } = req.params;
    const { name, avatar }: AddPlayerRequest = req.body;

    const game = await prisma.game.findUnique({
      where: { id },
      include: { players: true },
    });

    if (!game) {
      return res.status(404).json({ error: 'Game not found' });
    }

    if (game.status !== 'WAITING') {
      return res.status(400).json({ error: 'Cannot add players to active game' });
    }

    const player = await prisma.player.create({
      data: {
        id: uuidv4(),
        gameId: id,
        userId: uuidv4(), // In real app, this would be authenticated user ID
        name,
        avatar,
        order: game.players.length + 1,
      },
    });

    res.status(201).json({ player });
  } catch (error) {
    next(error);
  }
};

export const startGame = async (req: Request, res: Response, next: NextFunction) => {
  try {
    const { id } = req.params;

    const game = await prisma.game.findUnique({
      where: { id },
      include: { players: true },
    });

    if (!game) {
      return res.status(404).json({ error: 'Game not found' });
    }

    if (game.players.length < 2) {
      return res.status(400).json({ error: 'Need at least 2 players to start' });
    }

    const updatedGame = await prisma.game.update({
      where: { id },
      data: {
        status: 'ACTIVE',
        currentPlayerId: game.players[0].id,
      },
    });

    res.json({ game: updatedGame });
  } catch (error) {
    next(error);
  }
};

export const getNextTurn = async (req: Request, res: Response, next: NextFunction) => {
  try {
    const { id } = req.params;
    const { playerId, type }: GenerateItemRequest = req.body;

    // This would integrate with LLM service
    const generatedItem = await prisma.generatedItem.create({
      data: {
        id: uuidv4(),
        type: type.toUpperCase() as 'TRUTH' | 'DARE',
        content: 'Sample question/action', // Would be generated by LLM
        scenarioId: 'default',
      },
    });

    const turn = await prisma.turn.create({
      data: {
        id: uuidv4(),
        gameId: id,
        playerId,
        generatedItemId: generatedItem.id,
        choice: type.toUpperCase() as 'TRUTH' | 'DARE',
      },
    });

    res.json({ turn, generatedItem });
  } catch (error) {
    next(error);
  }
};

export const submitTurn = async (req: Request, res: Response, next: NextFunction) => {
  try {
    const { id } = req.params;
    const { result }: SubmitTurnRequest = req.body;

    const turn = await prisma.turn.update({
      where: { id },
      data: {
        result,
        completedAt: new Date(),
      },
    });

    res.json({ turn });
  } catch (error) {
    next(error);
  }
};
